Code for AFM Indentation


Using python as a basis for the Atomic Force Microscope, the initial idea was to integrate a live micromanager image capture while performing an AFM indentation to simultaneously indent the surface and observe it within a single application. Other ideas of integration relied on both simultaneously reading and plotting the x-y axis data of the PSD auto-aligner while indenting as well, however, some troubles arose through the length of time to complete an indentation cycle.

With everything included, a simple indentation test including the full length of travel from the Nanomax (25mm) was reaching around 1 min to process everything and thus, while optimization of each code configuration could have been done; instead, some components were eliminated.

  - Included within the eliminations was micromanager as it could be run within the native app simultaneously and thus, eliminates the need to import and process data back and forth between both applications.

  - Furthermore, as the Auto-Aligner is near the system, the updating graph is unnecessary as it provides the same information as the screen on said k-cube

Thus, leaving the indentation code to strictly read and enter data into a text file that can either be inserted into the Matlab code, or into gwyddion for analysis with a graph showing the initial indentation travel data for the PSD, the strain values and the retraction data.


To run the code, kinesis from Thorlabs must be downloaded to ensure the system has the proper base files to initialize and verify data transfer between the K-cubes to the system through the .dll files 
Python was used to read the file of which base 3.12 python was used with Pycharm for running the Code
  
  - Upon running the program, a windows application will open and all spaces must be filled to properly proceed to indentation/file saving
  
  - Ensure the PSD is retaining data, and vary the setpoint with respect to a maximum value obtained through the auto-aligner

  - The 'material name' is strictly for file save, however, must be entered to start testing and when 'Save File' is selected, it should create various files that can be read by both gwyddion and as a text file including:
          - A seperate indentation and retraction files
          - A seperate file for each specific data point (X-Diff, Y-Diff, Summation) in both indentation and retraction

  - Exit simply exits the program (can also be exited through Pycharm's stop program run button)

  - Zero simply 'zeros'/sets the data of the cubes to a base 0 value to start the program from a base value
